// SPDX-License-Identifier: AGPL-3.0-or-later
pragma solidity ^0.8.20;

// solhint-disable no-inline-assembly

library PriceTable {
    uint256 public constant STEP = 100;
    uint256 public constant PRICE_MAX = 1e18;
    uint256 public constant V_MAX = 1_000_000;
    uint256 public constant V_STEP = V_MAX / STEP;

    error NonMonitonicPriceInterpolation();
    error MaximumVolumeExceeded();
    error VolumeOffsetOutOfBounds();
    error StepIndexOutOfBounds();

    bytes public constant PRICE_DATA =
        hex"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002fd68b18f1ce88000000000000000000000000000000000000000000000000003c45ad814eb9180000000000000000000000000000000000000000000000000044fe9266f31520000000000000000000000000000000000000000000000000004bf02d00f39b180000000000000000000000000000000000000000000000000051cd4b681c7f100000000000000000000000000000000000000000000000000056ed7234574434000000000000000000000000000000000000000000000000005b82cb6e750158000000000000000000000000000000000000000000000000005fad1631e39d10000000000000000000000000000000000000000000000000006381d63295434800000000000000000000000000000000000000000000000000671060b921747c000000000000000000000000000000000000000000000000006a64118eeff7e0000000000000000000000000000000000000000000000000006d8595cee3fd7800000000000000000000000000000000000000000000000000707bb8e0ec62b800000000000000000000000000000000000000000000000000734be9663ea2380000000000000000000000000000000000000000000000000075fa92b52d3c3000000000000000000000000000000000000000000000000000788b5b029d722c000000000000000000000000000000000000000000000000007b014fbc117488000000000000000000000000000000000000000000000000007d5f05e9560f68000000000000000000000000000000000000000000000000007fa6b24b8142880000000000000000000000000000000000000000000000000081da3ba689fb180000000000000000000000000000000000000000000000000083fb48d68b591800000000000000000000000000000000000000000000000000860b4bcf24f1c000000000000000000000000000000000000000000000000000880b8a4dbb89480000000000000000000000000000000000000000000000000089fd24cde62a40000000000000000000000000000000000000000000000000008be11c28002b40000000000000000000000000000000000000000000000000008db85626718470000000000000000000000000000000000000000000000000008f83a14ad56ba0000000000000000000000000000000000000000000000000009143b7ee31b9400000000000000000000000000000000000000000000000000092f942dd4472200000000000000000000000000000000000000000000000000094a4db8a696ea80000000000000000000000000000000000000000000000000096470de8fd70380000000000000000000000000000000000000000000000000097e05a01e73630000000000000000000000000000000000000000000000000009971354db3e0f0000000000000000000000000000000000000000000000000009afa0bde372288000000000000000000000000000000000000000000000000009c7b415fb14300000000000000000000000000000000000000000000000000009df531f7f9e7d8000000000000000000000000000000000000000000000000009f683308fd34f000000000000000000000000000000000000000000000000000a0d493dae6486000000000000000000000000000000000000000000000000000a23a9e319006a800000000000000000000000000000000000000000000000000a39a96d038fe1800000000000000000000000000000000000000000000000000a4f4bdedf8ac0800000000000000000000000000000000000000000000000000a6494f9d0d6cd000000000000000000000000000000000000000000000000000a7988426c6097800000000000000000000000000000000000000000000000000a8e2905d846ad000000000000000000000000000000000000000000000000000aa27a5e61d954800000000000000000000000000000000000000000000000000ab67f379ab5f7800000000000000000000000000000000000000000000000000aca3a520bc8a0000000000000000000000000000000000000000000000000000addae468ae886800000000000000000000000000000000000000000000000000af0dd893e03b1800000000000000000000000000000000000000000000000000b03ca6c5552ad800000000000000000000000000000000000000000000000000b16772284cc11000000000000000000000000000000000000000000000000000b28e5c143fe25000000000000000000000000000000000000000000000000000b3b1842da8be6000000000000000000000000000000000000000000000000000b4d10883ec2b4000000000000000000000000000000000000000000000000000b5ed05acb12bc800000000000000000000000000000000000000000000000000b70596dcea02b000000000000000000000000000000000000000000000000000b81ad5ffca3be000000000000000000000000000000000000000000000000000b92cdbcbde2b7000000000000000000000000000000000000000000000000000ba3bbfd672619000000000000000000000000000000000000000000000000000bb4798a57458d800000000000000000000000000000000000000000000000000bc507bbff1155000000000000000000000000000000000000000000000000000bd567dbd526b6000000000000000000000000000000000000000000000000000be59b25378276000000000000000000000000000000000000000000000000000bf5a2c63c73a2000000000000000000000000000000000000000000000000000c057fe074658d800000000000000000000000000000000000000000000000000c1533899dd1b4000000000000000000000000000000000000000000000000000c24becc4c8853800000000000000000000000000000000000000000000000000c3422a8856089000000000000000000000000000000000000000000000000000c4360144f462f000000000000000000000000000000000000000000000000000c5277fc3a83f9800000000000000000000000000000000000000000000000000c616b43df1350800000000000000000000000000000000000000000000000000c703ac652a868800000000000000000000000000000000000000000000000000c7ee75697207c000000000000000000000000000000000000000000000000000c8d71c001e8bd800000000000000000000000000000000000000000000000000c9bdac69ce749000000000000000000000000000000000000000000000000000caa2327816303800000000000000000000000000000000000000000000000000cb84b992d5ca7800000000000000000000000000000000000000000000000000cc654cbd3c120800000000000000000000000000000000000000000000000000cd43f69a7d4c0000000000000000000000000000000000000000000000000000ce20c17242e8f800000000000000000000000000000000000000000000000000cefbb734d93f6000000000000000000000000000000000000000000000000000cfd4e17f1fe3a800000000000000000000000000000000000000000000000000d0ac499e40d75800000000000000000000000000000000000000000000000000d181f89332733000000000000000000000000000000000000000000000000000d255f71607a03000000000000000000000000000000000000000000000000000d3284d9911abf800000000000000000000000000000000000000000000000000d3f9044bd6c55800000000000000000000000000000000000000000000000000d4c8231ddfefb800000000000000000000000000000000000000000000000000d595b1c161084000000000000000000000000000000000000000000000000000d661b7adbd43d000000000000000000000000000000000000000000000000000d72c3c21ea613800000000000000000000000000000000000000000000000000d7f54626b49fe000000000000000000000000000000000000000000000000000d8bcdc90e5663800000000000000000000000000000000000000000000000000d98306034e5f1800000000000000000000000000000000000000000000000000da47c8f0bab5e800000000000000000000000000000000000000000000000000db0b2b9dc7faf000000000000000000000000000000000000000000000000000dbcd3422a81f7800000000000000000000000000000000000000000000000000dc8de86ccddd6000000000000000000000000000000000000000000000000000dd4d4e4084caa000000000000000000000000000000000000000000000000000de0b6b3a763ff80";

    function loadPriceAtStep(bytes memory priceData, uint256 stepIndex) public pure returns (uint256 price) {
        require(stepIndex <= STEP, StepIndexOutOfBounds());

        // Each price is 32 bytes (256 bits)
        uint256 offset = stepIndex * 32;
        require(offset + 32 <= PRICE_DATA.length, VolumeOffsetOutOfBounds());

        assembly {
            price := mload(add(priceData, add(32, offset)))
        }
    }

    /**
     * @dev Returns the price for a given volume using linear interpolation.
     * @param volume The current volume (buys - sells).
     * @return price The quoted price scaled by 1e18.
     */
    function getPrice(uint256 volume) internal pure returns (uint256 price) {
        require(volume <= V_MAX, MaximumVolumeExceeded());

        uint256 stepIndex = volume / V_STEP;
        uint256 remainder = volume % V_STEP;

        if (stepIndex == STEP) {
            return PRICE_MAX;
        }

        // load price data
        bytes memory priceData = PRICE_DATA;

        uint256 priceLower = loadPriceAtStep(priceData, stepIndex);
        uint256 priceUpper = loadPriceAtStep(priceData, stepIndex + 1);

        // Linear interpolation
        uint256 interpolated = priceLower + ((priceUpper - priceLower) * remainder) / V_STEP;

        // Ensure monotonicity
        require(interpolated >= priceLower && interpolated <= priceUpper, NonMonitonicPriceInterpolation());

        return interpolated;
    }
}
